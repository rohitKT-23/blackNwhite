name: CI/CD Pipeline - TruthPost

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: 🛎 Checkout Code
        uses: actions/checkout@v3

      - name: 🏗 Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 📦 Install Backend Dependencies
        working-directory: truthpost-backend
        run: npm install

      - name: 📦 Install Frontend Dependencies
        working-directory: truthpost-frontend
        run: npm install

      - name: 🔍 Run ESLint Security Scan
        working-directory: truthpost-backend
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx --quiet --format compact || true


      - name: 🔍 Run Semgrep Scan (Optional)
        working-directory: truthpost-backend
        run: |
          pip install semgrep
          semgrep scan --config="p/default"

      - name: 🐳 Pull Fake News Detection Service from DockerHub
        run: docker pull rohitkt23/fake-news-service:latest

      - name: 🐳 Run Fake News Detection Service
        run: docker run -d -p 8001:8001 --name fake-news-service rohitkt23/fake-news-service:latest

      - name: 🐳 Pull Deepfake Detection Service from DockerHub
        run: docker pull rohitkt23/deepfake-service:latest

      - name: 🐳 Run Deepfake Detection Service
        run: docker run -d -p 8002:8002 --name deepfake-service rohitkt23/deepfake-service:latest

      - name: 🧠 Test AI Fake News Detection Service
        run: |
          sleep 5  # Wait for container to start
          RESPONSE=$(curl -s -X POST http://localhost:8001/predict-text -H "Content-Type: application/json" -d '{"text": "This is a test news article"}')
          echo "Response: $RESPONSE"
          LABEL=$(echo $RESPONSE | jq -r '.label')
          if [[ "$LABEL" == "fake" ]]; then
            echo "🚨 Fake News Detected! Failing Pipeline..."
            exit 1
          fi



      - name: 🧪 Run Tests (Optional)
        working-directory: truthpost-backend
        run: npm test || echo "⚠️ Tests failed, but continuing..."

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: 🛎 Checkout Code
        uses: actions/checkout@v3

      - name: 🚀 Deploy Only New Changes to AWS EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          SSH_USER: ubuntu
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "Deploying only new changes to EC2..."
          echo "$SSH_KEY" > blackNwhite.pem
          chmod 600 blackNwhite.pem
          ssh -o StrictHostKeyChecking=no -i blackNwhite.pem $SSH_USER@$EC2_HOST << 'EOF'
            cd /home/ubuntu/truthpost
            git fetch origin main
            CHANGED_FILES=$(git diff --name-only HEAD origin/main)

            if [[ -z "$CHANGED_FILES" ]]; then
              echo "✅ No new changes detected. Skipping deployment."
              exit 0
            fi

            git pull origin main

            if [[ "$CHANGED_FILES" == *"truthpost-backend/"* ]]; then
              echo "🚀 Updating Backend..."
              cd truthpost-backend
              npm install
              pm2 restart truthpost-backend
            fi

            if [[ "$CHANGED_FILES" == *"truthpost-frontend/"* ]]; then
              echo "🚀 Updating Frontend..."
              cd truthpost-frontend
              npm install
              npm run build
              pm2 restart truthpost-frontend
            fi

            # Restart Docker containers for AI services
            docker pull rohitkt23/fake-news-service:latest
            docker pull rohitkt23/deepfake-service:latest
            docker stop fake-news-service deepfake-service || true
            docker rm fake-news-service deepfake-service || true
            docker run -d -p 8001:8001 --name fake-news-service rohitkt23/fake-news-service:latest
            docker run -d -p 8002:8002 --name deepfake-service rohitkt23/deepfake-service:latest
          EOF

      - name: ✅ Deployment Success Message
        run: echo "🎉 Deployment to AWS EC2 completed!"
